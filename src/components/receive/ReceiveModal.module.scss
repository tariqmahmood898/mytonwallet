@use "sass:map";

@use "../../styles/mixins";

.modalDialog {
  overflow: hidden;
  height: 42rem;

  @supports (height: env(safe-area-inset-bottom)) {
    height: calc(42rem + env(safe-area-inset-bottom));
  }
}

// `min-height: 100%` should be set for the Transition component to work,
// because on iOS the dialog doesn't have a height value, and the container uses `align-items: flex-start`.
.iosModalDialog {
  min-height: 100%;
}

.contentWrapper {
  overflow: hidden;
  flex-grow: 1;
}

.content {
  overflow: hidden;
  overflow-y: auto;
  display: flex;
  flex-direction: column;
  flex-grow: 1;

  padding: 1rem;

  background-color: var(--color-background-window);

  @supports (padding-bottom: var(--safe-area-bottom)) {
    padding-bottom: max(var(--safe-area-bottom), 1rem);
  }

  @include mixins.respond-above(xs) {
    border-bottom-right-radius: var(--border-radius-default);
    border-bottom-left-radius: var(--border-radius-default);
  }
}

.contentTitle {
  margin-bottom: 1.5rem;

  font-size: 0.9375rem;
  line-height: 1.1875rem;
  color: var(--color-gray-2);
  text-align: center;
}

.contentTitleQr {
  margin-top: 0.375rem;
  padding: 0 0.3125rem;

  @include mixins.respond-above(xs) {
    margin-bottom: 0.3125rem;
  }
}

.contentTitleLedger {
  margin-top: 1rem;
  margin-bottom: 1rem;
}

.contentTitleLedgerStatic {
  margin-bottom: 0;
}

.tabsInModal,
.receiveHeader {
  background-color: var(--color-background-first-disabled) !important;
}

:global(.is-android) .receiveHeaderNoTabs {
  --color-background-first-disabled: transparent;
}

.contentStatic {
  padding-top: 0.75rem !important;
  padding-bottom: 0 !important;
  background-color: var(--color-background-first) !important;
}

.tabs {
  --tab-gap-size: 2rem;

  justify-content: center !important;
  padding: 0.75rem 0.75rem 0.5rem;
}

.tabsOverlay {
  --tab-gap-size: 2rem;

  top: 0.75rem;

  justify-content: center !important;

  min-width: 100%;
  padding: 0 0.75rem;

  background-color: var(--color-activity-blue-background) !important;

  @include mixins.transition('background-color 200ms, clip-path var(--slide-transition)', !important);

  @include mixins.byChainClass() using ($variables) {
    background-color: map.get($variables, tabBackground) !important;
  }
}

.tabsInModal {
  z-index: 0 !important;

  @include mixins.separatorBottom();
}

.tab {
  flex-grow: 0 !important;

  @include mixins.byChainClass() using ($variables) {
    &:global(.current-tab) {
      color: map.get($variables, tabColor);
    }
  }
}

.qrCode {
  position: relative;

  overflow: hidden;

  aspect-ratio: 1;
  width: 100%;
  max-width: 11rem;
  margin: 0 auto;
  border-radius: var(--border-radius-card);

  background-color: var(--color-white);

  transition: opacity 350ms ease-in-out;

  canvas {
    position: absolute;
    top: 0.5rem;
    left: 0.5rem;

    display: block;

    width: calc(100% - 1rem);
    height: calc(100% - 1rem);
  }
}

.qrCodeStatic {
  max-width: 8rem;
  margin-bottom: 0.4375rem;
}

.qrCodeHidden {
  opacity: 0;
}

.labelForInvoice {
  margin: 0.3125rem 0 0.5rem 0.5rem;

  font-size: 0.8125rem;
  font-weight: 700;
  line-height: 1;
  color: var(--color-gray-2);
}

.addressWrapper {
  margin: 1rem 0;
}

.copyButtonStatic {
  border: 1px solid var(--color-separator-input-stroke) !important;
  background: transparent !important;
}

.tokenButton {
  margin-inline-end: 0.375rem;
}

.invoiceComment {
  margin: 0.25rem 0 1.25rem;
}

.dottedLink {
  cursor: var(--custom-cursor, pointer);
  font-weight: 600;
  text-decoration: underline;
  text-decoration-style: dotted;

  &:hover,
  &:focus-visible {
    text-decoration: none;
  }
}

.actionButtons {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.actionButton {
  max-width: 100% !important;
}
