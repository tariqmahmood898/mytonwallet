@use "../../styles/mixins";

// It's necessary to use `transform: none` instead of `transform: translateY(0)`, because the latter cancels
// `background-attachment: fixed` in the child elements. Fixed background attachment is used, for example, to
// synchronize the shimmer animation in the skeletons.

.modal {
  --transition: 350ms cubic-bezier(0.2, 0.9, 0.42, 1);

  position: relative;
  z-index: var(--z-modal);

  &.inAppLock {
    z-index: var(--z-modal-in-autolock);
  }

  &.error {
    .dialog {
      max-width: 23rem;
    }
  }

  .dialog {
    transform: translateY(-1rem);
    opacity: 0;
    transition: transform var(--transition), opacity var(--transition);

    :global(html.animation-level-0) & {
      transform: none;
      transition: var(--no-animation-transition);
    }
  }

  &:global(.open) .dialog {
    transform: none;
    opacity: 1;
  }

  &:global(.closing) .dialog {
    transform: translateY(1rem);
  }

  .backdrop {
    opacity: 0;
    transition: opacity var(--transition);

    :global(html.animation-level-0) & {
      transition: var(--no-animation-transition);
    }
  }

  &:global(.open) .backdrop {
    opacity: 1;
  }
}

.slideUpAnimation {
  --transition: 500ms cubic-bezier(0.3, 0.8, 0.2, 1);

  .container {
    overflow: hidden;
    align-items: flex-end;
    padding: 0;
  }

  // Disable catching events on closing modals
  &:global(.closing) .container {
    pointer-events: none;
  }

  .dialog {
    transform: translateY(100%);

    max-width: 28rem;
    max-height: calc(95 * var(--vh, 1vh));
    margin: 0;
    border-radius: var(--border-radius-default) var(--border-radius-default) 0 0;

    background: var(--color-background-window);

    transition: transform var(--transition);

    :global(html:not(.animation-level-0)) & {
      opacity: 1;
    }

    :global(html.animation-level-0) & {
      transition: var(--no-animation-transition);
    }

    > :global(.Transition-slideLayers),
    > :global(.Transition-slideLayersBackwards) {
      border-radius: var(--border-radius-default) var(--border-radius-default) 0 0;
    }
  }

  &:global(.open) .dialog {
    transform: none;
  }

  &:global(.closing) .dialog {
    transform: translateY(100%);
  }

  :global(html.animation-level-0) &:global(.closing) {
    .dialog {
      display: none;

      // The transition for the `display` property is needed to prevent blocking events
      /* stylelint-disable-next-line plugin/no-low-performance-animation-properties */
      transition: var(--no-animation-transition), display 0ms 200ms !important;
    }

    .backdrop {
      display: none;
    }
  }

  // Mimic the animation from the system Settings section on Android
  :global(html.is-telegram-app) &:not(.forceBottomSheet),
  :global(html.is-android) &:not(.forceBottomSheet) {
    --transition: 500ms cubic-bezier(0.16, 1, 0.3, 1);

    .dialog {
      transform: translateY(15%);

      height: 100%;
      max-height: calc(100% - var(--safe-area-top));
      border-radius: 0;

      opacity: 0;

      > :global(.Transition-slideLayers),
      > :global(.Transition-slideLayersBackwards) {
        border-radius: 0;
      }
    }

    &:global(.open) .dialog {
      transform: none;
      opacity: 1;
      transition: transform var(--transition), opacity var(--transition);
    }

    &:global(.closing) {
      .dialog {
        transform: translateY(3%);
        transition: transform 200ms ease-in, opacity 100ms 100ms ease-out !important;
      }
    }
  }

  // Fix transparent navigation bar in Capacitor app for Android.
  :global(html.is-android-app) &:not(.forceBottomSheet) .dialog {
    max-height: 100%;
    padding-top: var(--safe-area-top);
    padding-bottom: var(--safe-area-bottom);
  }

  :global(html.is-mobile-telegram-app.is-fullscreen) &:not(.forceBottomSheet) {
    .dialog {
      max-height: 100%;
    }

    .content {
      padding-top: var(--tg-safe-area-inset-top);
    }
  }

  :global(html.is-native-bottom-sheet) & {
    .container {
      align-items: flex-start;
      background: var(--color-background-window);
    }

    .dialog {
      max-height: none;
      border-radius: 0;
      box-shadow: none;
      transition: none;
    }

    &:global(.closing) .dialog {
      transform: none;
    }

    .backdrop {
      display: none;
    }
  }
}

.container {
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;

  display: flex;
  align-items: center;
  justify-content: center;

  padding: 1rem;
}

.backdrop {
  position: fixed;
  z-index: -1;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;

  background-color: var(--color-tint);
}

.noBackdrop {
  background-color: transparent !important;
}

.dialog {
  position: relative;

  display: inline-flex;
  flex-direction: column;

  width: 100%;
  min-width: 17.5rem;
  max-width: 26rem;
  max-height: 100%;
  margin: 2rem auto;
  border-radius: var(--border-radius-default);

  background-color: var(--color-background-window);
  box-shadow: var(--default-shadow);

  .content > :global(.Transition-slideLayers),
  .content > :global(.Transition-slideLayersBackwards) {
    overflow: hidden;
    border-radius: var(--border-radius-default);
  }

  @media (min-width: 416.01px) {
    // 26rem = 416px
    .compact & {
      max-width: 24rem;
    }
  }
}

.header {
  position: relative;

  display: grid;
  grid-template-areas: "back title button";
  grid-template-columns: 0.5fr 1fr 0.5fr;
  align-items: center;

  padding: 1rem;

  color: var(--color-black);

  :global(html.is-mobile-telegram-app.is-fullscreen) & {
    padding-top: 0.625rem;
  }

  &_wideContent {
    grid-template-columns: 0.25fr 1.5fr 0.25fr;
  }

  &_back {
    cursor: var(--custom-cursor, pointer);

    display: flex;
    grid-area: back;
    align-items: center;

    margin-left: -0.875rem;
    padding: 0 0.5rem;

    font-size: 1.0625rem;
    color: var(--color-accent);

    :global(html.is-mobile-telegram-app) & {
      visibility: hidden;
    }
  }

  &_backIcon {
    font-size: 1.5rem;
  }
}

.menuButton {
  grid-area: button;

  width: auto !important;
  max-width: none !important;
  height: auto !important;
  margin-right: 0.5rem;
  margin-left: auto;
  padding: 0.5rem !important;

  color: var(--color-gray-3) !important;

  background: none !important;

  transition: color 150ms;

  &:hover,
  &:focus-visible {
    color: var(--color-text) !important;
  }

  &:active {
    // Optimization
    transition: none;
  }

  :global(html.animation-level-0) & {
    transition: var(--no-animation-transition) !important;
  }

  @include mixins.respond-below(xs) {
    :global(html.is-telegram-app) & {
      visibility: hidden;
    }
  }
}

.menuIcon {
  font-size: 1.125rem;
  line-height: 1;
  transition: color 150ms;

  :global(html.animation-level-0) & {
    transition: none !important;
  }
}

.closeButton {
  grid-area: button;

  width: 1.875rem !important;
  max-width: none !important;
  height: 1.875rem !important;
  margin-left: auto;
  padding: 0 !important;
  border-radius: 50% !important;

  color: var(--color-close-button-text) !important;

  background-color: var(--color-close-button-background) !important;

  transition: background-color 150ms;

  &:hover,
  &:focus-visible {
    color: var(--color-close-button-text-hover) !important;
    background-color: var(--color-close-button-background-hover) !important;
  }

  &:active {
    // Optimization
    transition: none;
  }

  :global(html.animation-level-0) & {
    transition: var(--no-animation-transition) !important;
  }

  @include mixins.respond-below(xs) {
    :global(html.is-telegram-app) & {
      visibility: hidden;
    }
  }
}

.closeIcon {
  font-size: 1.875rem;
  line-height: 1;
  transition: color 150ms;

  :global(html.animation-level-0) & {
    transition: none !important;
  }
}

.title {
  overflow: hidden;
  grid-area: title;

  font-size: 1.0625rem;
  font-weight: 700;
  line-height: 1;
  text-align: center;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.singleTitle {
  grid-column: 1 / 4;
  line-height: 1.875rem;
}

.content {
  overflow-y: auto;
  display: flex;
  flex-direction: column;
  flex-grow: 1;

  width: 100%;

  font-size: 0.9375rem;

  b, strong {
    overflow-wrap: anywhere;
  }
}

.contentCompact {
  padding: 0.5rem 1rem 1rem;
}

.text {
  margin-right: 0.5rem;
  margin-bottom: 1.25rem;
  margin-left: 0.5rem;
  font-size: 0.9375rem;

  &_centered {
    text-align: center;
  }

  &_noExtraMargin {
    margin-bottom: 1.25rem !important;
  }

  &:last-of-type {
    margin-bottom: 1.5rem;
  }
}

.buttons {
  display: grid;
  grid-auto-columns: minmax(max-content, 1fr);
  grid-auto-flow: column;
  gap: 1rem;
  justify-items: center;

  margin-top: auto; // Used to pull down when modal has fixed height
  padding-top: 2rem;

  .compact & {
    padding-top: 0;
  }
}

.footerButtons {
  display: flex;
  gap: 1rem;
  align-items: center;
  justify-content: center;

  margin-top: auto;
  padding-top: 2rem;

  &.footerButtonsVertical,
  &.footerButtonFullWidth {
    width: 100%;
    margin-top: initial;
    padding-top: initial;
  }

  &.footerButtonsVertical {
    flex-direction: column;
    gap: 0.75rem;
  }
}

.buttonsInsideContentWithScroll {
  margin-bottom: -1rem;
  padding-bottom: 1rem;
}

.buttonsNoExtraSpace {
  padding-top: 0;
}

.button {
  width: 100%;
  min-width: 9rem !important;
  max-width: 68vw !important;
}

.buttonHalfWidth {
  width: 100%;
  max-width: calc((100% - 1rem) / 2) !important;
}

.buttonFullWidth {
  width: 100%;
  max-width: 100% !important;
}

.shortButton {
  min-width: 6rem !important;
}

.transition {
  overflow-x: hidden;
  flex: 1 1 auto;
}

.transitionSlide {
  --background-color: var(--color-background-window);

  display: flex;
  flex-direction: column;
  min-width: 0;
  max-width: 100%;
}

.transitionContentWrapper {
  display: flex;
  flex-direction: column;
  height: 100%;
  min-height: 0;
}

.transitionContent {
  display: flex;
  flex-direction: column;
  flex-grow: 1;
  flex-shrink: 0;

  min-width: 0;
  min-height: 0;
  padding: 0 1rem 1rem;

  background-color: inherit;

  &_simple {
    padding-top: 5.5rem;
  }

  :global(.is-native-bottom-sheet),
  :global(html:not(.is-android-app)) & {
    padding-bottom: max(var(--safe-area-bottom, 1rem), 1rem);
  }

  :global(html.with-safe-area-bottom.is-telegram-app) & {
    padding-bottom: var(--safe-area-bottom) !important;
  }
}
